module.exports = {
  title: 'Sets the title displayed to the user in the dialog.',
  titleText: 'Sets a title for the image to be displayed to the user.',
  textMessage: 'Sets the text sent in the message. If not Blocks are available, this is shown to the user in the chat. Otherwise, it is the text shown in the push notification.',
  textButton: 'Sets the text displayed on the button.',
  textConfirmationDialog: 'Sets the text that is displayed in the body of the confirmation dialog',
  textOption: 'Sets the text that is displayed in the select menu.',
  textSection: 'Sets the textual content of the section. It also supports markdown syntax.',
  confirm: 'Sets a confirmation dialog to be shown upon interaction.',
  confirmConfirmationDialog: 'Sets the text of the button that confirms the interaction.',
  maxSelectedItems: 'Sets a maximum number of items that can be selected in the menu.',
  deny: 'Sets the text of the button that cancels the interaction.',
  primary: 'Sets the style of the button, making it green.',
  danger: 'Sets the style of the button, making it red.',
  label: 'Sets the label to be displayed above the input Element.',
  labelOptionGroup: 'Sets the label to be displayed in the select menu, above the options in the group',
  options: 'Appends options. Can be called multiple times.',
  value: 'Sets the value, which will be returned to your application as an identifier of the action taken by the user.',
  description: 'Sets a description to be shown next to the radio button.',
  url: 'Sets the URL to which the user will be redirected upon clicking the action.',
  elements: 'Appends elements. Can be called multiple times.',
  externalId: 'Sets the Slack-provided ID for Slack to identify the object.',
  imageUrl: 'Sets the source URL of the image.',
  altText: 'Sets the alt text for the image.',
  element: 'Sets an element to be attached.',
  hint: 'Sets a hint to be displayed below the input.',
  optional: 'Sets the input to being an optional field in the form. By default, form elements are required for successful form submission.',
  fields: 'Appends text fields that are displayed side-by-side. Can be called multiple times.',
  accessory: 'Sets an Element to be attached to the section.',
  initialChannels: 'Appends channels selected at load. Can be called multiple times.',
  initialChannel: 'Sets the channel to be selected by default.',
  responseUrlEnabled: 'Sets this option to `true`. By doing so, a response URL will be supplied with payloads to your application upon interaction.',
  initialOption: 'Sets the option that is selected by default upon loading.',
  initialOptions: 'Appends initial options to be selected by default. Can be called multiple times.',
  initialConversations: 'Appends conversations to be selected by default. Can be called multiple times.',
  defaultToCurrentConversation: 'Sets this option to true, making the default selected conversation the one currently open for the user.',
  filter: 'Appends a filter to filter out which conversations should be included in the list. Possible values are *im*, *impm*, *private*, and *public*. Can be called multiple times.',
  excludeExternalSharedChannels: 'Sets this option to `true`, excluding externally shared conversations from the menu.',
  excludeBotUsers: 'Sets this option to `true`, excluding bot users from the menu.',
  initialConversation: 'Sets the conversation selected by default in the menu.',
  initialDate: 'Sets a date to be selected by default in the datepicker.',
  minQueryLength: 'Sets a minimum number of characters typed before querying your options URL.',
  optionGroups: 'Appends groups of options for the select menu. Can be called multiple times.',
  placeholder: 'Sets a placeholder to be displayed for the form input element.',
  initialValue: 'Sets the value set by default upon loading.',
  multiline: 'Sets this option to `true`, making the text input field larger, for paragraph text.',
  minLength: 'Sets a minimum character count in order for the user to submit the form.',
  maxLength: 'Sets a maximum character count in order for the user to submit the form.',
  initialUser: 'Sets the user selected by default in the menu.',
  initialUsers: 'Sets the users selected by default in the menu.',
  channel: 'Sets the channel to which the message will be sent.',
  close: 'Sets the text of the close button in the modal.',
  submit: 'Sets the text of the submit button in the modal.',
  clearOnClose: 'Sets this option to `true`, meaning all open modals (for example, modals lower in the stack) will be cleared up closing it.',
  notifyOnClose: 'Sets this option to `true`, meaning your application will receive an interaction payload when the modal is closed.',
  asUser: 'Sets this option to `true`, which means the message will be sent from your app as a user or bot user.',
  ts: 'Sets the timestamp of a message to update.',
  threadTs: 'Sets the timestamp of the message to which the current message will be sent, as a message in its thread.',
  replaceOriginal: 'Sets this option to `true`, which means when sent, this message will replace the message that is the origin of the interaction payload. Used when working with response URLs.',
  deleteOriginal: 'Sets this option to `true`, which means when sent, this message will delete the message that is the origin of the interaction payload. Used when working with response URLs.',
  postAt: 'Sets a timestamp for a time in the future, at which the message will be sent. Used for scheduling messages.',
  ephemeral: 'Sets the response type to be `ephemeral`, which makes the message only visible to the user to which it is sent. Used when sending a message to a channel or conversation with multiple users present.',
  inChannel: 'Sets the response type to be `in_channel`, which makes the message only visible everyone in the channel or conversation to which it is sent.',
  blockId: 'Sets an ID for the Block to help you identify it in interaction and submission payloads.',
  actionId: 'Sets an ID for the Element to help you identify it and capture set values in interaction and submission payloads.',
  privateMetaData: 'Sets a string to be returned back to your application with interaction and submission payloads. Typically used to persist data between views or provide context for an interaction.',
  callbackId: 'Sets a string to be returned back to your application with interaction and submission payloads. Typically used to persist data between views or provide context for an interaction. Is considered legacy, according to Slack\'s documentation. It is recommended to use `privateMetaData()` instead.',
  blocks: 'Appends Blocks to a Surface. Can be called multiple times.',
  color: 'Sets the color of the border to the left of the message attachment.',
  attachments: 'Appends Attachments to the Message. Can be called multiple times.',
};
